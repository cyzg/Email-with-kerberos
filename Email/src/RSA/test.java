package RSA;

import java.math.BigInteger;

public class test {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		rsa rsa1 = new rsa() ;
		BigInteger p = new BigInteger("106697219132480173106064317148705638676529121742557567770857687729397446898790451577487723991083173010242416863238099716044775658681981821407922722052778958942891831033512463262741053961681512908218003840408526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169") ;
		BigInteger q = new BigInteger("144819424465842307806353672547344125290716753535239658417883828941232509622838692761917211806963011168822281666033695157426515864265527046213326145174398018859056439431422867957079149967592078894410082695714160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209") ;
		
	    // 生成公钥私钥'''
	    // pubkey, selfkey = gen_key(p, q)
	    BigInteger[][] keys = rsa1.genKey(p, q) ;
	    BigInteger[] pubkey  = keys[0] ;
	    BigInteger[] selfkey = keys[1] ;
	    

		String plaintext = "0101010";
		

	    
		  System.out.println("明文：" + plaintext);
		String ciphertext = rsa1.encrypt(plaintext, keys[0]);

		String plainText =  rsa1.decrypt(ciphertext, keys[1]);

	}

}
